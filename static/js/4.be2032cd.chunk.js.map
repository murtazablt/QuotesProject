{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","NewQuote","useHttp","addQuote","sendRequest","status","navigate","useNavigate","useEffect","newQuote"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCyE/BC,EApEG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAwBrB,OACE,cAAC,WAAD,UAQE,cAAC,EAAD,UACE,uBAEEN,UAAWC,IAAQO,KACnBC,SAjCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBP,EAAeQ,QAAQC,MACvCC,EAAcR,EAAaM,QAAQC,MAKzCf,EAAMiB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAqB5C,UAKGhB,EAAMoB,WACL,qBAAKnB,UAAWC,IAAQmB,QAAxB,SACE,cAACC,EAAA,QAAD,MAIJ,sBAAKrB,UAAWC,IAAQqB,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKrB,OAEtC,sBAAKL,UAAWC,IAAQqB,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKnB,OAEpC,qBAAKP,UAAWC,IAAQ2B,QAAxB,SACE,wBAEA5B,UAAU,MAFV,iC,gBChCG6B,UAxBf,WACE,MAA8BC,YAAQC,KAA/BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAEdC,EAAWC,cAgBjB,OAdAC,qBAAU,WACO,cAAXH,GACFC,EAAS,aAIX,CAACD,EAAOC,IASR,cAAC,EAAD,CAAWf,UAAsB,YAAXc,EAAsBjB,WAPtB,SAACqB,GACvBL,EAAYK","file":"static/js/4.be2032cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__Liz0I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3H4y0\",\"loading\":\"QuoteForm_loading__30-6u\",\"control\":\"QuoteForm_control__2nuZS\",\"actions\":\"QuoteForm_actions__3o3cY\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef } from \"react\";\n// import { Prompt } from \"react-router-dom\";\nimport { Fragment } from \"react/cjs/react.production.min\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  // const [isFocused, setIsFocused] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    // setIsFocused(false);\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  // const formFocusedHandler = () => {\n  //   setIsFocused(true);\n  // };\n\n  // const finishFocusHandler = () => {\n  //   setIsFocused(false);\n  // };\n\n  return (\n    <Fragment>\n      {/* Prompt is currently not supported yet by v6 */}\n      {/* <Prompt\n        when={isFocused}\n        message={(location) =>\n          \"Are you sure you want to leave? All your entered data will be lost!\"\n        }\n      /> */}\n      <Card>\n        <form\n          // onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button \n            // onClick={finishFocusHandler} \n            className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React,{useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport QuoteForm from \"../components/quotes/QuoteForm\"\r\n\r\nimport useHttp from '../hooks/use-http'\r\nimport {addQuote} from '../lib/api'\r\n\r\nfunction NewQuote() {\r\n  const {sendRequest, status} = useHttp(addQuote)\r\n\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed') {\r\n      navigate('/quotes')\r\n    }\r\n    \r\n\r\n  },[status,navigate])\r\n\r\n  const addQuoteHandler = (newQuote) => {\r\n    sendRequest(newQuote)\r\n    //push method allows users to go back to previous page but replace does not.\r\n    // history.push('/quotes')\r\n  }\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />\r\n  )\r\n}\r\n\r\nexport default NewQuote"],"sourceRoot":""}
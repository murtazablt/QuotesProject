{"version":3,"sources":["components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js"],"names":["module","exports","NewCommentForm","props","useHttp","addComment","sendRequest","status","error","onAddedComment","commentTextRef","useRef","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","useParams","addedCommentHandler","useCallback","length","onClick"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,6B,gHCkDdC,EA1CQ,SAACC,GACtB,MAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MACtBC,EAAkBN,EAAlBM,eAEDC,EAAiBC,mBAGvBC,qBAAU,WACM,cAAXL,GAA2BC,GAC5BC,MAEF,CAACF,EAAQC,EAAOC,IAGlB,IAAMI,EAAoB,SAACC,GACzBA,EAAMC,iBAKN,IAAMC,EAAcN,EAAeO,QAAQC,MAC3CZ,EAAY,CAACa,YAAa,CAACC,KAAMJ,GAAcK,QAASlB,EAAMkB,WAGhE,OACE,uBAAMC,UAAWC,IAAQC,KAAMC,SAAUZ,EAAzC,UACc,YAAXN,GACC,qBAAKe,UAAU,WAAf,SACE,cAACI,EAAA,QAAD,MAGJ,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUZ,EAA3C,UACE,uBAAOe,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKrB,OAEvC,qBAAKY,UAAWC,IAAQS,QAAxB,SACE,wBAAQV,UAAU,MAAlB,+B,iBCnCOW,EARK,SAAC9B,GACnB,OACE,oBAAImB,UAAWC,IAAQW,KAAvB,SACE,4BAAI/B,EAAMiB,U,iBCQDe,EAVM,SAAChC,GACpB,OACE,oBAAImB,UAAWC,IAAQa,SAAvB,SACGjC,EAAMiC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlB,KAAMkB,EAAQlB,MAA1BkB,EAAQT,U,iBCuEnBU,UAlEE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEA,EAIItC,YAAQuC,KAAgB,GAH1BrC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMqC,EAHR,EAGEC,KAIMxB,EADOyB,cACPzB,QAERT,qBAAU,WACRN,EAAYe,KACX,CAACf,EAAae,IAEjB,IAQIe,EAJEW,EAAsBC,uBAAY,WACtC1C,EAAYe,KACZ,CAACf,EAAae,IAyBhB,MArBe,YAAXd,IACF6B,EACE,sBAAKd,UAAU,WAAf,UACE,cAACI,EAAA,QAAD,IADF,QAKW,cAAXnB,IAA2BqC,GAAkBA,EAAeK,OAAS,KACvEb,EAAW,cAAC,EAAD,CAAcA,SAAUQ,KAGxB,cAAXrC,GACEqC,GAA4C,IAA1BA,EAAeK,SAEnCb,EACE,qBAAKd,UAAU,WAAf,SACE,oDAMJ,0BAASA,UAAWC,IAAQa,SAA5B,UACE,gDACEK,GACA,wBAAQnB,UAAU,MAAM4B,QAnCC,WAC7BR,GAAmB,IAkCf,2BAIDD,GACC,cAAC,EAAD,CACEpB,QAASA,EACTZ,eAAgBsC,IAGnBX","file":"static/js/3.d08aee34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1elHr\",\"loading\":\"NewCommentForm_loading__31Gs4\",\"control\":\"NewCommentForm_control__16tCL\",\"actions\":\"NewCommentForm_actions__1dOrC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3kllh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2YIY_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3gwGz\"};","import { useRef, useEffect } from \"react\";\n\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner\";\n\nimport {  addComment } from \"../../lib/api\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const {onAddedComment} = props\n\n  const commentTextRef = useRef();\n\n\n  useEffect(()=>{\n    if(status === \"completed\" && !error){\n      onAddedComment()\n    }\n  },[status, error, onAddedComment])\n\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    const enteredText = commentTextRef.current.value\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\n\nimport NewCommentForm from \"./NewCommentForm\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nimport classes from \"./Comments.module.css\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n  } = useHttp(getAllComments, true);\n\n  const params = useParams();\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />;\n      </div>\n    );\n  }\n  if (status === \"completed\" && (loadedComments || loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = (\n      <div className=\"centered\">\n        <p>No comments yet!</p>\n      </div>\n    );\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"sourceRoot":""}